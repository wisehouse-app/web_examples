---
import type { PropertyData, Room } from "../../components/listings/types";
import BedroomIcon from "../../components/icons/BedroomIcon.astro";
import BathroomIcon from "../../components/icons/BathroomIcon.astro";
import PriceIcon from "../../components/icons/PriceIcon.astro";
import MainLayout from "../../layouts/MainLayout.astro";
import type WiseHouseError from "../../utils/wise_house_error";
import RoomBreakdown from "../../components/listings/RoomBreakdown.astro";

export const prerender = false;

// GET MODEL ID OR FAIL!
const { property_id: propID } = Astro.params;
if (!propID) {
    throw new Error("Could not find property id.");
}

let wisehouse_key = import.meta.env.WISEHOUSE_API_KEY;

let response: Response = await fetch(
    `http://localhost:3030/listings?id=${propID}`,
    {
        headers: {
            "WiseHouse-API-Key": wisehouse_key,
        },
    },
);

let propertyData: PropertyData | undefined = undefined;
try {
    if (response.ok) {
        const ret = await response.json();
        propertyData = ret;
    } else {
        let err: WiseHouseError = await response.json();
        console.error(`when ${err.moment} : ${err.msg}`);
    }
} catch (err) {
    console.error(JSON.stringify(err));
}

if (!propertyData) {
    throw new Error("No property data");
}

/* GET SOME SIZE DATA */
let nBedrooms: number | undefined = propertyData?.index.n_bedrooms;
let nBathrooms: number | undefined = propertyData?.index.n_bathrooms;
if (!nBedrooms || !nBathrooms) {
    nBedrooms = 0;
    nBathrooms = 0;
    propertyData?.summary?.rooms.forEach((r: Room) => {
        if (!r.purposes) {
        } else {
            if (r.purposes!.indexOf("Bedroom") >= 0) {
                nBedrooms! += 1;
            }
            if (r.purposes!.indexOf("Bathroom") >= 0) {
                nBathrooms! += 1;
            }
        }
    });
}

/* ADD FORMAT TO PRICE */
function parsePrice(price: number | undefined): string | undefined {
    if (!price) {
        return undefined;
    }
    let priceString = price.toString();
    // Reverse the string
    const reversedString = priceString.split("").reverse().join("");

    // Add commas every 3 characters (except the first)
    let formattedPrice = "";
    for (let i = 0; i < reversedString.length; i++) {
        if (i > 0 && i % 3 === 0) {
            formattedPrice += ",";
        }
        formattedPrice += reversedString[i];
    }

    // Reverse the formatted string back to normal order
    return formattedPrice.split("").reverse().join("");
}
const thePrice: string | undefined = parsePrice(propertyData?.index.price);
const avatarURL = propertyData?.index.avatar;

/* PROCESS DESCRIPTION */
const description: string[] | undefined =
    propertyData?.index?.listing_text?.split("\\n");

const sessionID: string | null = Astro.url.searchParams.get("session");
const dynamicResponse: Response = await fetch(
    `http://localhost:3030/dynamic_listing?id=${propID}&session_id=${sessionID}`,
    {
        headers: {
            "WiseHouse-API-Key": wisehouse_key,
        },
    },
);
let dynamicDecription: string[] | undefined = undefined;
if (dynamicResponse.ok) {
    const r = await dynamicResponse.json();
    dynamicDecription = r.listing.split("\\n");
}

// Rooms
const nrooms = propertyData?.summary?.rooms.length;
const nstoreys = propertyData?.summary?.nstoreys;
let storeyBreakdown: Room[][] | undefined = undefined;
if (nstoreys) {
    storeyBreakdown = Array.apply(null, Array(nstoreys)).map((x) => []);
    propertyData?.summary?.rooms.forEach((r: Room) => {
        if (r.storey && storeyBreakdown) {
            storeyBreakdown![r.storey - 1].push(r);
        } else {
            storeyBreakdown = undefined;
        }
    });
}
---

<MainLayout>
    <style>
        div#main {
            width: 100vw;
            min-height: 100vh;
        }

        #main {
            width: 100vw;
            height: 100vh;
        }

        #header {
            width: 100%;
            height: 75vh;
            display: flex;
            flex-direction: column;
            background-color: #dde3ea;
        }

        #big-image {
            flex: 1;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
        }

        #images {
            width: auto;
            height: 120px;
            display: flex;
            justify-content: center;
            overflow-x: scroll;
            -ms-overflow-style: none; /* IE and Edge */
            scrollbar-width: none; /* Firefox */
        }
        #images::-webkit-scrollbar {
            display: none;
        }

        #content {
            padding: 1em;
            margin: 0 auto;
            max-width: 1000px;
        }
        #intro h1 {
            margin: 0.2em 0;
        }
        #images img {
            margin: 2px;
            max-height: 100%;
            cursor: pointer;
            border-radius: 0.4em;
        }
        p#price {
            margin: 0;
            margin-bottom: 0.3em;
        }

        div#size {
            margin-bottom: 2em;
        }

        div#size > span {
            margin-right: 1em;
        }

        div#details {
            width: 100%;
            display: flex;
            margin: 0 auto;
            justify-content: center;
        }
        div#left {
            max-width: 600px;
            min-width: 320px;
            margin-right: 2em;
            flex-grow: 1;
        }

        #chat {
            height: 650px;
            width: 280px;
            border: none;
        }
        div#right {
            width: fit-content;
            min-width: fit-content;
            padding: 0.4em;
            border-radius: 0.5em;
            box-shadow:
                0 3px 6px rgba(0, 0, 0, 0.16),
                0 3px 6px rgba(0, 0, 0, 0.23);
        }
        span.size-icon {
            font-size: 1.2em;
        }
        div.section {
            border-bottom: 1px solid rgba(0, 0, 0, 0.15);
            margin-bottom: 3em;
        }
        div.section > p:first-child {
            font-weight: bold;
        }
        @media (max-width: 720px) {
            div#details {
                flex-wrap: wrap;
            }
        }
    </style>
    <div id="main">
        <div id="header">
            <div id="big-image"></div>
            <div id="images">
                {
                    propertyData?.summary?.images?.map((src: string) => {
                        return <img src={src} />;
                    })
                }
            </div>
        </div>
        <div id="content">
            <div id="intro">
                {propertyData?.title && <h1>{propertyData?.title}</h1>}
                {
                    thePrice && (
                        <p id="price">
                            <span class="size-icon">
                                <PriceIcon />
                            </span>
                            {thePrice}
                        </p>
                    )
                }
                <div id="size">
                    {
                        propertyData?.index.area_sqm && (
                            <span> {propertyData?.index.area_sqm} mÂ² </span>
                        )
                    }
                    {
                        nstoreys && (
                            <span>
                                {nstoreys}
                                {nstoreys === 1 ? "storey" : "storeys"}
                            </span>
                        )
                    }

                    {
                        nBedrooms && (
                            <span>
                                <span class="size-icon">
                                    <BedroomIcon />
                                </span>
                                {nBedrooms}
                            </span>
                        )
                    }
                    {
                        nBathrooms && (
                            <span>
                                <span class="size-icon">
                                    <BathroomIcon />
                                </span>
                                {nBathrooms}
                            </span>
                        )
                    }
                </div>
                <div id="details">
                    <div id="left">
                        {
                            dynamicDecription && (
                                <div class="section">
                                    <p>Reasons you will love this property</p>
                                    <div>
                                        {dynamicDecription.map((d: string) => {
                                            return <p>{d}</p>;
                                        })}
                                    </div>
                                </div>
                            )
                        }
                        {
                            description && (
                                <div class="section">
                                    <p>About the property</p>
                                    <div>
                                        {description.map((d: string) => {
                                            return <p>{d}</p>;
                                        })}
                                    </div>
                                </div>
                            )
                        }
                        {
                            nrooms && (!storeyBreakdown || nstoreys === 1) && (
                                <div class="section">
                                    <p>
                                        {propertyData?.summary?.rooms.length ===
                                        1
                                            ? "About the space"
                                            : `About the ${propertyData?.summary?.rooms.length} spaces`}
                                    </p>
                                    <RoomBreakdown
                                        rooms={propertyData?.summary?.rooms}
                                    />
                                </div>
                            )
                        }
                        {
                            nrooms && storeyBreakdown && nstoreys !== 1 && (
                                <div class="section">
                                    <p>
                                        {propertyData?.summary?.rooms.length ===
                                        1
                                            ? "About the space"
                                            : `About the ${propertyData?.summary?.rooms.length} spaces`}
                                    </p>
                                    <div>
                                        {storeyBreakdown.map(
                                            (rooms: Room[], storey: number) => {
                                                return (
                                                    <div>
                                                        <small style="font-weight:bold;">
                                                            Storey {storey + 1}
                                                        </small>
                                                        <RoomBreakdown
                                                            rooms={rooms}
                                                        />
                                                    </div>
                                                );
                                            },
                                        )}
                                    </div>
                                </div>
                            )
                        }
                    </div>
                    {
                        propertyData?.summary && 
                        <div id="right">
                            <iframe
                                id="chat"
                                src=`http://localhost:4321/chat/${propID}?no3d&notitle&bg=fff`
                            ></iframe>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <script define:vars={{ avatarURL }}>
        const bigImage = document.getElementById("big-image");
        bigImage.style.backgroundImage = `url("${avatarURL}")`;

        const imageGallery = document.getElementById("images");
        imageGallery.childNodes.forEach((v) => {
            v.onclick = () => {
                bigImage.style.backgroundImage = `url("${v.src}")`;
            };
        });
    </script>
</MainLayout>
